{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"aiofiles>=24.1.0\",\n    \"fastapi>=0.117.1\",\n    \"google-generativeai>=0.8.5\",\n    \"langchain>=0.3.27\",\n    \"librosa>=0.11.0\",\n    \"pydantic>=2.11.9\",\n    \"pydub>=0.25.1\",\n    \"python-dotenv>=1.1.1\",\n    \"python-multipart>=0.0.20\",\n    \"requests>=2.32.5\",\n    \"soundfile>=0.13.1\",\n    \"uvicorn>=0.37.0\",\n]\n","size_bytes":451},"replit.md":{"content":"# Zoo Management System\n\n## Overview\n\nA comprehensive zoo animal monitoring system built with React frontend, Express.js backend, and PostgreSQL database. The application enables zookeepers to record daily observations via audio recordings, which are automatically transcribed and structured using AI (Google Gemini), while providing role-based dashboards for administrators, veterinarians, and zookeepers to track animal health and welfare.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React SPA** with TypeScript and Vite for development\n- **shadcn/ui** component library with Radix UI primitives for accessible components\n- **TailwindCSS** with custom theming for consistent design system\n- **Wouter** for lightweight client-side routing\n- **TanStack Query** for server state management and caching\n- **React Hook Form** with Zod validation for form handling\n\n### Backend Architecture\n- **Express.js** server with TypeScript and ESM modules\n- **Session-based authentication** with express-session and PostgreSQL session storage\n- **Role-based access control** (admin, doctor, zookeeper roles)\n- **RESTful API** design with structured error handling\n- **Multer** for handling audio file uploads\n- **Python integration** for AI processing via child process execution\n\n### Database Design\n- **PostgreSQL** with Neon serverless for hosting\n- **Drizzle ORM** for type-safe database operations and migrations\n- **Key entities**: Users (role-based), Submissions (audio recordings with metadata), Comments (feedback system), Sessions (authentication)\n- **Structured data storage** using JSONB for flexible animal monitoring data\n\n### AI Processing Pipeline\n- **Audio transcription** using Deepgram API\n- **Structured data extraction** from transcriptions using Google Gemini LLM\n- **LangChain** with Pydantic for structured output parsing\n- **Schema-driven data validation** ensuring consistent animal monitoring records\n\n### Authentication & Authorization\n- **Session-based authentication** with secure cookie handling\n- **Three-tier role system**: Administrators (full system access), Veterinarians (review and comment), Zookeepers (data entry)\n- **Route-level protection** with middleware-based role checking\n- **Automatic role-based dashboard routing**\n\n### File Handling\n- **Audio recording** support in browser with MediaRecorder API\n- **Multiple audio format support** (WAV, MP3, M4A, OGG)\n- **File size validation** (50MB limit) and format checking\n- **Temporary file storage** with cleanup after processing\n\n### State Management\n- **Client-side caching** with TanStack Query for server state\n- **Optimistic updates** for better user experience\n- **Real-time data invalidation** on mutations\n- **Form state management** with React Hook Form\n\n## External Dependencies\n\n### AI Services\n- **Google Gemini API** (gemini-2.5-flash model) for text processing and structured data extraction\n- **Deepgram API** for high-accuracy audio transcription\n\n### Database & Hosting\n- **Neon Database** (PostgreSQL-compatible serverless database)\n- **WebSocket support** for database connections via @neondatabase/serverless\n\n### UI Components\n- **Radix UI** primitives for accessible, unstyled components\n- **Lucide React** for consistent iconography\n- **TailwindCSS** for utility-first styling\n\n### Development Tools\n- **Vite** for fast development and building\n- **TypeScript** for type safety across frontend and backend\n- **ESBuild** for efficient production bundling\n- **Drizzle Kit** for database schema management\n\n### Python AI Stack\n- **LangChain** for LLM workflow orchestration\n- **Pydantic** for data validation and parsing\n- **Google GenerativeAI** Python client for Gemini integration\n\n### Session Management\n- **connect-pg-simple** for PostgreSQL-backed session storage\n- **Express-session** for server-side session handling","size_bytes":3915},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"pulse-record\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-record\": \"pulse-record 1s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2979},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/zoo_model_1758643193442.py":{"content":"import os\r\nimport requests\r\nfrom pydantic import BaseModel, Field\r\nfrom langchain.prompts import PromptTemplate\r\nfrom langchain.output_parsers import PydanticOutputParser\r\nimport google.generativeai as genai\r\n\r\n# ----------------------------\r\n# Schema for structured data\r\n# ----------------------------\r\nclass AnimalMonitoringData(BaseModel):\r\n    date_or_day: str = Field(..., description=\"Date or day of observation\")\r\n    animal_observed_on_time: bool = Field(..., description=\"Was the animal seen at the scheduled observation time?\")\r\n    clean_drinking_water_provided: bool = Field(..., description=\"Was clean drinking water available?\")\r\n    enclosure_cleaned_properly: bool = Field(..., description=\"Was the enclosure cleaned as required?\")\r\n    normal_behaviour_status: bool = Field(..., description=\"Is the animal showing normal behaviour and activity?\")\r\n    normal_behaviour_details: str | None = Field(None, description=\"If abnormal behaviour observed, provide details\")\r\n    feed_and_supplements_available: bool = Field(..., description=\"Was feed and supplements available?\")\r\n    feed_given_as_prescribed: bool = Field(..., description=\"Was the feed given as prescribed?\")\r\n    other_animal_requirements: str | None = Field(None, description=\"Any other special needs or requirements\")\r\n    incharge_signature: str = Field(..., description=\"Signature of caretaker or in-charge\")\r\n    daily_animal_health_monitoring: str = Field(..., description=\"Summary of daily animal health monitoring\")\r\n    carnivorous_animal_feeding_chart: str = Field(..., description=\"Summary of carnivorous animal feeding chart\")\r\n    medicine_stock_register: str = Field(..., description=\"Summary of medicine stock register\")\r\n    daily_wildlife_monitoring: str = Field(..., description=\"Summary of daily wildlife monitoring observations\")\r\n\r\n\r\n# ----------------------------\r\n# Zoo AI Model with Deepgram\r\n# ----------------------------\r\nclass ZooAIModel:\r\n    def __init__(self):\r\n        \"\"\"Initialize Gemini LLM and Deepgram API.\"\"\"\r\n        # Gemini LLM\r\n        gem_key =\"AIzaSyDt928pvQOybM4guAeR2MzVWiUEGPCZGvA\"\r\n        if gem_key:\r\n            genai.configure(api_key=gem_key)\r\n            self.llm = genai.GenerativeModel(\"gemini-2.5-flash\")\r\n        else:\r\n            self.llm = None\r\n\r\n        # Deepgram API\r\n        self.deepgram_key =\"66236062e554aa03b6c134fd627447bb6073dd7e\"\r\n        self.deepgram_url = \"https://api.deepgram.com/v1/listen\"\r\n\r\n        # Parser & prompt\r\n        self.parser = PydanticOutputParser(pydantic_object=AnimalMonitoringData)\r\n        self.prompt = PromptTemplate(\r\n            template=\"\"\"\r\n                You are an animal monitoring assistant.\r\n                Given the input observation, return structured monitoring data\r\n                in valid JSON format that matches the schema.\r\n\r\n                {format_instructions}\r\n\r\n                ONLY return a JSON object, no extra text, no code, no comments.\r\n\r\n                Observation: {observation}\r\n            \"\"\",\r\n            input_variables=[\"observation\"],\r\n            partial_variables={\"format_instructions\": self.parser.get_format_instructions()},\r\n        )\r\n\r\n    # ----------------------------\r\n    # Deepgram Transcription\r\n    # ----------------------------\r\n    def transcribe_audio(self, audio_bytes, language=\"hi\"):\r\n        \"\"\"Transcribe audio using Deepgram API.\"\"\"\r\n        if not self.deepgram_key:\r\n            return \"Audio transcription unavailable - Deepgram API key missing\"\r\n\r\n        headers = {\r\n            \"Authorization\": f\"Token {self.deepgram_key}\",\r\n            \"Content-Type\": \"audio/wav\",  # assumes WAV upload\r\n        }\r\n\r\n        try:\r\n            response = requests.post(\r\n                self.deepgram_url,\r\n                headers=headers,\r\n                data=audio_bytes,\r\n                timeout=60,\r\n                params={\"language\": language}\r\n            )\r\n            response.raise_for_status()\r\n            result = response.json()\r\n\r\n            transcript = (\r\n                result.get(\"results\", {})\r\n                      .get(\"channels\", [{}])[0]\r\n                      .get(\"alternatives\", [{}])[0]\r\n                      .get(\"transcript\", \"\")\r\n            )\r\n            return transcript or \"No text returned by Deepgram\"\r\n\r\n        except Exception as e:\r\n            print(\"Error transcribing audio:\", e)\r\n            return f\"Error in audio transcription: {str(e)}\"\r\n\r\n    # ----------------------------\r\n    # Gemini Processing\r\n    # ----------------------------\r\n    def process_observation(self, observation_text, date):\r\n        \"\"\"Convert text observation into structured data using Gemini.\"\"\"\r\n        try:\r\n            if not self.llm:\r\n                return self._create_fallback_data(observation_text, date)\r\n\r\n            enhanced_observation = f\"Date: {date}\\nObservation: {observation_text}\"\r\n            response = self.llm.generate_content(\r\n                self.prompt.format(observation=enhanced_observation)\r\n            )\r\n\r\n            json_text = getattr(response, \"text\", None) or \"\"\r\n            result = self.parser.parse(json_text)\r\n\r\n            if hasattr(result, \"date_or_day\"):\r\n                result.date_or_day = date\r\n\r\n            return result\r\n\r\n        except Exception as e:\r\n            print(f\"Error processing observation: {e}\")\r\n            return self._create_fallback_data(observation_text, date)\r\n\r\n    def process_audio_observation(self, audio_bytes, date, language=\"hi\"):\r\n        \"\"\"Transcribe audio and process observation.\"\"\"\r\n        text = self.transcribe_audio(audio_bytes, language)\r\n        if text.startswith(\"Error\") or text.startswith(\"Audio transcription unavailable\"):\r\n            return self._create_fallback_data(text, date)\r\n        return self.process_observation(text, date)\r\n\r\n    # ----------------------------\r\n    # Fallback Data\r\n    # ----------------------------\r\n    def _create_fallback_data(self, observation_text, date):\r\n        \"\"\"Return fallback structured data if LLM or transcription fails.\"\"\"\r\n        return AnimalMonitoringData(\r\n            date_or_day=date,\r\n            animal_observed_on_time=True,\r\n            clean_drinking_water_provided=True,\r\n            enclosure_cleaned_properly=True,\r\n            normal_behaviour_status=True,\r\n            normal_behaviour_details=None,\r\n            feed_and_supplements_available=True,\r\n            feed_given_as_prescribed=True,\r\n            other_animal_requirements=(observation_text[:200] + \"...\" \r\n                                       if len(observation_text) > 200 else observation_text),\r\n            incharge_signature=\"Zoo Keeper\",\r\n            daily_animal_health_monitoring=f\"Observation recorded on {date}: {observation_text[:100]}{'...' if len(observation_text) > 100 else ''}\",\r\n            carnivorous_animal_feeding_chart=\"Standard feeding schedule followed\",\r\n            medicine_stock_register=\"Stock levels adequate\",\r\n            daily_wildlife_monitoring=f\"Wildlife monitoring completed on {date}\"\r\n        )\r\n\r\n\r\n# Instantiate global model\r\nzoo_model = ZooAIModel()\r\n","size_bytes":7095},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import 'dotenv/config';\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport fs from \"fs/promises\";\nimport path from \"path\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema } from \"@shared/schema\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    // Ensure required directories exist\n    await fs.mkdir(path.join(process.cwd(), \"uploads\"), { recursive: true });\n    await fs.mkdir(path.join(process.cwd(), \"reports\"), { recursive: true });\n  } catch (e) {\n    log(`failed to ensure directories: ${String(e)}`);\n  }\n\n  // Seed default users if they do not exist yet\n  try {\n    const existingAdmin = await storage.getUserByCredentials({ userId: \"admin1\", password: \"admin\" });\n    const existingDoctor = await storage.getUserByCredentials({ userId: \"doctor1\", password: \"doctor\" });\n    const existingKeeper = await storage.getUserByCredentials({ userId: \"keeper1\", password: \"keeper\" });\n\n    if (!existingAdmin) {\n      await storage.createUser(insertUserSchema.parse({ userId: \"admin1\", password: \"admin\", role: \"admin\", name: \"Admin User\", email: \"admin@example.com\" }));\n      log(\"seeded default admin user (admin1/admin)\");\n    }\n    if (!existingDoctor) {\n      await storage.createUser(insertUserSchema.parse({ userId: \"doctor1\", password: \"doctor\", role: \"doctor\", name: \"Doctor User\", email: \"doctor@example.com\" }));\n      log(\"seeded default doctor user (doctor1/doctor)\");\n    }\n    if (!existingKeeper) {\n      await storage.createUser(insertUserSchema.parse({ userId: \"keeper1\", password: \"keeper\", role: \"zookeeper\", name: \"Keeper One\", email: \"keeper@example.com\" }));\n      log(\"seeded default zookeeper user (keeper1/keeper)\");\n    }\n  } catch (e) {\n    log(`user seeding skipped/failed: ${String(e)}`);\n  }\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    \n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3711},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport { loginSchema, insertCommentSchema } from \"@shared/schema\";\nimport multer from \"multer\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport fs from \"fs/promises\";\nimport path from \"path\";\n\n// Extend Express Request to include session\ndeclare module \"express-serve-static-core\" {\n  interface Request {\n    session: any;\n  }\n}\n\nconst execAsync = promisify(exec);\n\n// Configure multer for audio uploads\nconst upload = multer({\n  dest: \"uploads/\",\n  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB limit\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith(\"audio/\")) {\n      cb(null, true);\n    } else {\n      cb(new Error(\"Only audio files are allowed\"));\n    }\n  },\n});\n\n// Session middleware for authentication\nconst requireAuth = (req: Request, res: any, next: any) => {\n  if (!req.session?.user) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n};\n\nconst requireRole = (roles: string[]) => (req: Request, res: any, next: any) => {\n  if (!roles.includes(req.session?.user?.role)) {\n    return res.status(403).json({ message: \"Insufficient permissions\" });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || \"zoo-management-secret\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: { \n      secure: false, // Set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const credentials = loginSchema.parse(req.body);\n      const user = await storage.getUserByCredentials(credentials);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.user = user;\n      res.json({ user: { id: user.id, userId: user.userId, role: user.role, name: user.name } });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(400).json({ message: \"Invalid request\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Could not log out\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/user\", requireAuth, (req: Request, res) => {\n    const user = req.session.user;\n    res.json({ id: user.id, userId: user.userId, role: user.role, name: user.name });\n  });\n\n  // Audio processing route for zoo keepers\n  app.post(\"/api/submissions/audio\", \n    requireAuth, \n    requireRole([\"zookeeper\"]), \n    upload.single(\"audio\"), \n    async (req: any, res) => {\n      try {\n        if (!req.file) {\n          return res.status(400).json({ message: \"Audio file is required\" });\n        }\n\n        const { date } = req.body;\n        if (!date) {\n          return res.status(400).json({ message: \"Date is required\" });\n        }\n\n        const user = req.session.user;\n        const audioPath = req.file.path;\n        const uploadedMime = req.file.mimetype || \"audio/wav\";\n        const ext = uploadedMime.split(\"/\")[1] || \"wav\";\n        const audioFileName = `${user.userId}_${date}_${Date.now()}.${ext}`;\n\n        try {\n          // Read audio file\n          const audioBuffer = await fs.readFile(audioPath);\n          \n          // Process audio using Python zoo model\n          const pythonScript = path.join(process.cwd(), \"server\", \"zoo_model.py\");\n          const tempAudioPath = path.join(process.cwd(), \"uploads\", audioFileName);\n          \n          // Copy audio to temp location for processing\n          await fs.copyFile(audioPath, tempAudioPath);\n          \n          // Call Python script to process audio (cross-platform)\n          const runPy = process.env.PYTHON || (process.platform === 'win32' ? 'python' : 'python3');\n          const runnerPath = path.join(process.cwd(), \"server\", \"run_model.py\");\n          const { stdout, stderr } = await execAsync(`${runPy} \"${runnerPath}\" \"${tempAudioPath}\" \"${date}\" hi \"${uploadedMime}\"`);\n\n          if (stderr) {\n            console.error(\"Python script error:\", stderr);\n          }\n\n          const structuredData = JSON.parse(stdout.trim());\n          \n          // Generate TXT file\n          const txtContent = generateTxtReport(structuredData, user.name, date);\n          const txtFileName = `${user.userId}_${date}_${Date.now()}.txt`;\n          const txtPath = path.join(process.cwd(), \"reports\", txtFileName);\n          \n          // Ensure reports directory exists\n          await fs.mkdir(path.join(process.cwd(), \"reports\"), { recursive: true });\n          await fs.writeFile(txtPath, txtContent);\n\n          // Store in database\n          const submission = await storage.createSubmission({\n            userId: user.id,\n            date,\n            audioFileName,\n            transcription: stdout.includes(\"transcript\") ? \"Transcribed from Hindi audio\" : undefined,\n            structuredData,\n            txtFileName,\n            status: \"processed\",\n          });\n\n          // Clean up temp files\n          await fs.unlink(audioPath);\n          await fs.unlink(tempAudioPath);\n\n          res.json({ \n            message: \"Audio processed successfully\", \n            submissionId: submission.id,\n            structuredData \n          });\n\n        } catch (processingError) {\n          console.error(\"Audio processing error:\", processingError);\n          \n          // Fallback processing\n          const fallbackData = {\n            date_or_day: date,\n            animal_observed_on_time: true,\n            clean_drinking_water_provided: true,\n            enclosure_cleaned_properly: true,\n            normal_behaviour_status: true,\n            normal_behaviour_details: null,\n            feed_and_supplements_available: true,\n            feed_given_as_prescribed: true,\n            other_animal_requirements: \"Audio processing error - manual review required\",\n            incharge_signature: user.name,\n            daily_animal_health_monitoring: `Observation recorded on ${date} - Audio processing encountered an error`,\n            carnivorous_animal_feeding_chart: \"Standard feeding schedule followed\",\n            medicine_stock_register: \"Stock levels adequate\",\n            daily_wildlife_monitoring: `Wildlife monitoring completed on ${date}`\n          };\n\n          const txtContent = generateTxtReport(fallbackData, user.name, date);\n          const txtFileName = `${user.userId}_${date}_${Date.now()}_fallback.txt`;\n          const txtPath = path.join(process.cwd(), \"reports\", txtFileName);\n          \n          await fs.mkdir(path.join(process.cwd(), \"reports\"), { recursive: true });\n          await fs.writeFile(txtPath, txtContent);\n\n          const submission = await storage.createSubmission({\n            userId: user.id,\n            date,\n            audioFileName,\n            transcription: \"Audio processing failed\",\n            structuredData: fallbackData,\n            txtFileName,\n            status: \"processed\",\n          });\n\n          res.json({ \n            message: \"Audio processed with fallback data\", \n            submissionId: submission.id,\n            structuredData: fallbackData \n          });\n        }\n\n      } catch (error) {\n        console.error(\"Submission error:\", error);\n        res.status(500).json({ message: \"Failed to process audio submission\" });\n      }\n    }\n  );\n\n  // Get submissions for current user (zoo keeper)\n  app.get(\"/api/submissions/my\", requireAuth, requireRole([\"zookeeper\"]), async (req: any, res) => {\n    try {\n      const submissions = await storage.getSubmissionsByUser(req.session.user.id);\n      res.json(submissions);\n    } catch (error) {\n      console.error(\"Error fetching user submissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch submissions\" });\n    }\n  });\n\n  // Get all submissions (admin and doctor)\n  app.get(\"/api/submissions/all\", requireAuth, requireRole([\"admin\", \"doctor\"]), async (req, res) => {\n    try {\n      const submissions = await storage.getAllSubmissions();\n      res.json(submissions);\n    } catch (error) {\n      console.error(\"Error fetching all submissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch submissions\" });\n    }\n  });\n\n  // Get submission details with comments\n  app.get(\"/api/submissions/:id\", requireAuth, async (req, res) => {\n    try {\n      const submissionId = parseInt(req.params.id);\n      const submission = await storage.getSubmissionById(submissionId);\n      \n      if (!submission) {\n        return res.status(404).json({ message: \"Submission not found\" });\n      }\n\n      res.json(submission);\n    } catch (error) {\n      console.error(\"Error fetching submission:\", error);\n      res.status(500).json({ message: \"Failed to fetch submission\" });\n    }\n  });\n\n  // Add comment to submission (admin and doctor)\n  app.post(\"/api/submissions/:id/comments\", \n    requireAuth, \n    requireRole([\"admin\", \"doctor\"]), \n    async (req: any, res) => {\n      try {\n        const submissionId = parseInt(req.params.id);\n        const { content } = insertCommentSchema.parse(req.body);\n        \n        const comment = await storage.createComment({\n          submissionId,\n          userId: req.session.user.id,\n          content,\n        });\n\n        res.json(comment);\n      } catch (error) {\n        console.error(\"Error adding comment:\", error);\n        res.status(400).json({ message: \"Failed to add comment\" });\n      }\n    }\n  );\n\n  // Download TXT report\n  app.get(\"/api/submissions/:id/download\", requireAuth, async (req, res) => {\n    try {\n      const submissionId = parseInt(req.params.id);\n      const submission = await storage.getSubmissionById(submissionId);\n      \n      if (!submission || !submission.txtFileName) {\n        return res.status(404).json({ message: \"Report not found\" });\n      }\n\n      const filePath = path.join(process.cwd(), \"reports\", submission.txtFileName);\n      res.download(filePath, submission.txtFileName);\n    } catch (error) {\n      console.error(\"Error downloading report:\", error);\n      res.status(500).json({ message: \"Failed to download report\" });\n    }\n  });\n\n  // Update submission (zoo keeper can edit their own)\n  app.put(\"/api/submissions/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const submissionId = parseInt(req.params.id);\n      const submission = await storage.getSubmissionById(submissionId);\n      \n      if (!submission) {\n        return res.status(404).json({ message: \"Submission not found\" });\n      }\n\n      // Check permissions\n      const user = req.session.user;\n      if (user.role === \"zookeeper\" && submission.userId !== user.id) {\n        return res.status(403).json({ message: \"Can only edit your own submissions\" });\n      }\n\n      const { structuredData } = req.body;\n      \n      // Regenerate TXT file with updated data\n      if (structuredData) {\n        const txtContent = generateTxtReport(structuredData, submission.user.name, submission.date);\n        const txtPath = path.join(process.cwd(), \"reports\", submission.txtFileName!);\n        await fs.writeFile(txtPath, txtContent);\n      }\n\n      const updated = await storage.updateSubmission(submissionId, {\n        structuredData: structuredData || submission.structuredData,\n      });\n\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating submission:\", error);\n      res.status(500).json({ message: \"Failed to update submission\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nfunction generateTxtReport(data: any, keeperName: string, date: string): string {\n  return `\nZOO ANIMAL MONITORING REPORT\n============================\n\nDate: ${date}\nZoo Keeper: ${keeperName}\nGenerated: ${new Date().toLocaleString()}\n\nOBSERVATION DETAILS\n-------------------\nAnimal Observed on Time: ${data.animal_observed_on_time ? \"Yes\" : \"No\"}\nClean Drinking Water Provided: ${data.clean_drinking_water_provided ? \"Yes\" : \"No\"}\nEnclosure Cleaned Properly: ${data.enclosure_cleaned_properly ? \"Yes\" : \"No\"}\nNormal Behaviour Status: ${data.normal_behaviour_status ? \"Yes\" : \"No\"}\n${data.normal_behaviour_details ? `Behaviour Details: ${data.normal_behaviour_details}` : \"\"}\nFeed and Supplements Available: ${data.feed_and_supplements_available ? \"Yes\" : \"No\"}\nFeed Given as Prescribed: ${data.feed_given_as_prescribed ? \"Yes\" : \"No\"}\n${data.other_animal_requirements ? `Other Requirements: ${data.other_animal_requirements}` : \"\"}\n\nMONITORING SUMMARIES\n--------------------\nDaily Animal Health Monitoring:\n${data.daily_animal_health_monitoring}\n\nCarnivorous Animal Feeding Chart:\n${data.carnivorous_animal_feeding_chart}\n\nMedicine Stock Register:\n${data.medicine_stock_register}\n\nDaily Wildlife Monitoring:\n${data.daily_wildlife_monitoring}\n\nAUTHORIZATION\n-------------\nIn-charge Signature: ${data.incharge_signature}\n\n---\nThis report was generated automatically by the Zoo Management System.\n  `.trim();\n}\n","size_bytes":13224},"server/run_model.py":{"content":"import sys\nimport os\nimport json\n\n\ndef main():\n    if len(sys.argv) < 3:\n        print(json.dumps({\"error\": \"Usage: run_model.py <audio_path> <date> [language] [mimetype]\"}))\n        return 1\n\n    audio_path = sys.argv[1]\n    date = sys.argv[2]\n    language = sys.argv[3] if len(sys.argv) > 3 else \"hi\"\n    mimetype = sys.argv[4] if len(sys.argv) > 4 else \"audio/wav\"\n\n    # Ensure server directory is on path\n    server_dir = os.path.dirname(os.path.abspath(__file__))\n    if server_dir not in sys.path:\n        sys.path.append(server_dir)\n\n    try:\n        from zoo_model import zoo_model  # type: ignore\n    except Exception as e:\n        print(json.dumps({\"error\": f\"Failed to import model: {e}\"}), file=sys.stderr)\n        return 1\n\n    try:\n        with open(audio_path, \"rb\") as f:\n            audio_bytes = f.read()\n        result = zoo_model.process_audio_observation(audio_bytes, date, language, mimetype)\n        # Pydantic model has .dict() in v1 and .model_dump() in v2\n        data = result.dict() if hasattr(result, \"dict\") else result.model_dump()  # type: ignore\n        print(json.dumps(data, ensure_ascii=False))\n        return 0\n    except Exception as e:\n        print(json.dumps({\"error\": f\"Processing error: {e}\"}), file=sys.stderr)\n        return 1\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n\n\n\n","size_bytes":1326},"server/storage.ts":{"content":"import {\n  users,\n  submissions,\n  comments,\n  type User,\n  type InsertUser,\n  type Submission,\n  type InsertSubmission,\n  type Comment,\n  type InsertComment,\n  type SubmissionWithUser,\n  type SubmissionWithComments,\n  type LoginCredentials,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUserByCredentials(credentials: LoginCredentials): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getUserById(id: string): Promise<User | undefined>;\n  \n  // Submission operations\n  createSubmission(submission: InsertSubmission & { userId: string }): Promise<Submission>;\n  getSubmissionsByUser(userId: string): Promise<SubmissionWithUser[]>;\n  getAllSubmissions(): Promise<SubmissionWithUser[]>;\n  getSubmissionById(id: number): Promise<SubmissionWithComments | undefined>;\n  updateSubmission(id: number, updates: Partial<InsertSubmission>): Promise<Submission>;\n  \n  // Comment operations\n  createComment(comment: InsertComment & { userId: string }): Promise<Comment>;\n  getCommentsBySubmission(submissionId: number): Promise<(Comment & { user: User })[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUserByCredentials(credentials: LoginCredentials): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(\n        and(\n          eq(users.userId, credentials.userId),\n          eq(users.password, credentials.password)\n        )\n      );\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async createSubmission(submission: InsertSubmission & { userId: string }): Promise<Submission> {\n    const [newSubmission] = await db\n      .insert(submissions)\n      .values(submission)\n      .returning();\n    return newSubmission;\n  }\n\n  async getSubmissionsByUser(userId: string): Promise<SubmissionWithUser[]> {\n    const result = await db\n      .select()\n      .from(submissions)\n      .leftJoin(users, eq(submissions.userId, users.id))\n      .where(eq(submissions.userId, userId))\n      .orderBy(desc(submissions.createdAt));\n    \n    return result.map(row => ({\n      ...row.submissions,\n      user: row.users!,\n    }));\n  }\n\n  async getAllSubmissions(): Promise<SubmissionWithUser[]> {\n    const result = await db\n      .select()\n      .from(submissions)\n      .leftJoin(users, eq(submissions.userId, users.id))\n      .orderBy(desc(submissions.createdAt));\n    \n    return result.map(row => ({\n      ...row.submissions,\n      user: row.users!,\n    }));\n  }\n\n  async getSubmissionById(id: number): Promise<SubmissionWithComments | undefined> {\n    const [submission] = await db\n      .select()\n      .from(submissions)\n      .leftJoin(users, eq(submissions.userId, users.id))\n      .where(eq(submissions.id, id));\n\n    if (!submission) return undefined;\n\n    const submissionComments = await db\n      .select()\n      .from(comments)\n      .leftJoin(users, eq(comments.userId, users.id))\n      .where(eq(comments.submissionId, id))\n      .orderBy(desc(comments.createdAt));\n\n    return {\n      ...submission.submissions,\n      user: submission.users!,\n      comments: submissionComments.map(c => ({\n        ...c.comments,\n        user: c.users!,\n      })),\n    } as SubmissionWithComments;\n  }\n\n  async updateSubmission(id: number, updates: Partial<InsertSubmission>): Promise<Submission> {\n    const [updated] = await db\n      .update(submissions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(submissions.id, id))\n      .returning();\n    return updated;\n  }\n\n  async createComment(comment: InsertComment & { userId: string }): Promise<Comment> {\n    const [newComment] = await db\n      .insert(comments)\n      .values(comment)\n      .returning();\n    return newComment;\n  }\n\n  async getCommentsBySubmission(submissionId: number): Promise<(Comment & { user: User })[]> {\n    const result = await db\n      .select()\n      .from(comments)\n      .leftJoin(users, eq(comments.userId, users.id))\n      .where(eq(comments.submissionId, submissionId))\n      .orderBy(desc(comments.createdAt));\n\n    return result.map(r => ({\n      ...r.comments,\n      user: r.users!,\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4540},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const __dirname = path.dirname(fileURLToPath(import.meta.url));\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const __dirname = path.dirname(fileURLToPath(import.meta.url));\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2416},"server/zoo_model.py":{"content":"import os\nimport sys\nimport requests\nfrom pydantic import BaseModel, Field\nfrom langchain.prompts import PromptTemplate\nfrom langchain.output_parsers import PydanticOutputParser\nimport google.generativeai as genai\n\n# ----------------------------\n# Schema for structured data\n# ----------------------------\nclass AnimalMonitoringData(BaseModel):\n    date_or_day: str = Field(..., description=\"Date or day of observation\")\n    animal_observed_on_time: bool = Field(..., description=\"Was the animal seen at the scheduled observation time?\")\n    clean_drinking_water_provided: bool = Field(..., description=\"Was clean drinking water available?\")\n    enclosure_cleaned_properly: bool = Field(..., description=\"Was the enclosure cleaned as required?\")\n    normal_behaviour_status: bool = Field(..., description=\"Is the animal showing normal behaviour and activity?\")\n    normal_behaviour_details: str | None = Field(None, description=\"If abnormal behaviour observed, provide details\")\n    feed_and_supplements_available: bool = Field(..., description=\"Was feed and supplements available?\")\n    feed_given_as_prescribed: bool = Field(..., description=\"Was the feed given as prescribed?\")\n    other_animal_requirements: str | None = Field(None, description=\"Any other special needs or requirements\")\n    incharge_signature: str = Field(..., description=\"Signature of caretaker or in-charge\")\n    daily_animal_health_monitoring: str = Field(..., description=\"Summary of daily animal health monitoring\")\n    carnivorous_animal_feeding_chart: str = Field(..., description=\"Summary of carnivorous animal feeding chart\")\n    medicine_stock_register: str = Field(..., description=\"Summary of medicine stock register\")\n    daily_wildlife_monitoring: str = Field(..., description=\"Summary of daily wildlife monitoring observations\")\n\n\n# ----------------------------\n# Zoo AI Model with Deepgram\n# ----------------------------\nclass ZooAIModel:\n    def __init__(self):\n        \"\"\"Initialize Gemini LLM and Deepgram API.\"\"\"\n        # Gemini LLM\n        gem_key = \"AIzaSyDt928pvQOybM4guAeR2MzVWiUEGPCZGvA\"\n        if gem_key:\n            genai.configure(api_key=gem_key)\n            self.llm = genai.GenerativeModel(\"gemini-2.5-flash\")\n        else:\n            self.llm = None\n\n        # Deepgram API\n        self.deepgram_key = \"66236062e554aa03b6c134fd627447bb6073dd7e\"\n        self.deepgram_url = \"https://api.deepgram.com/v1/listen\"\n\n        # Parser & prompt\n        self.parser = PydanticOutputParser(pydantic_object=AnimalMonitoringData)\n        self.prompt = PromptTemplate(\n            template=\"\"\"\n                You are an animal monitoring assistant.\n                Given the input observation, return structured monitoring data\n                in valid JSON format that matches the schema.\n\n                {format_instructions}\n\n                ONLY return a JSON object, no extra text, no code, no comments.\n\n                Observation: {observation}\n            \"\"\",\n            input_variables=[\"observation\"],\n            partial_variables={\"format_instructions\": self.parser.get_format_instructions()},\n        )\n\n    # ----------------------------\n    # Deepgram Transcription\n    # ----------------------------\n    def transcribe_audio(self, audio_bytes, language=\"hi\", content_type: str = \"audio/wav\"):\n        \"\"\"Transcribe audio using Deepgram API.\"\"\"\n        if not self.deepgram_key:\n            return \"Audio transcription unavailable - Deepgram API key missing\"\n\n        headers = {\n            \"Authorization\": f\"Token {self.deepgram_key}\",\n            \"Content-Type\": content_type or \"audio/wav\",\n        }\n\n        try:\n            response = requests.post(\n                self.deepgram_url,\n                headers=headers,\n                data=audio_bytes,\n                timeout=60,\n                params={\"language\": language}\n            )\n            response.raise_for_status()\n            result = response.json()\n\n            transcript = (\n                result.get(\"results\", {})\n                      .get(\"channels\", [{}])[0]\n                      .get(\"alternatives\", [{}])[0]\n                      .get(\"transcript\", \"\")\n            )\n            return transcript or \"No text returned by Deepgram\"\n\n        except Exception as e:\n            print(\"Error transcribing audio:\", e, file=sys.stderr)\n            return f\"Error in audio transcription: {str(e)}\"\n\n    # ----------------------------\n    # Gemini Processing\n    # ----------------------------\n    def process_observation(self, observation_text, date):\n        \"\"\"Convert text observation into structured data using Gemini.\"\"\"\n        try:\n            if not self.llm:\n                return self._create_fallback_data(observation_text, date)\n\n            enhanced_observation = f\"Date: {date}\\nObservation: {observation_text}\"\n            response = self.llm.generate_content(\n                self.prompt.format(observation=enhanced_observation)\n            )\n\n            json_text = getattr(response, \"text\", None) or \"\"\n            result = self.parser.parse(json_text)\n\n            if hasattr(result, \"date_or_day\"):\n                result.date_or_day = date\n\n            return result\n\n        except Exception as e:\n            print(f\"Error processing observation: {e}\")\n            return self._create_fallback_data(observation_text, date)\n\n    def process_audio_observation(self, audio_bytes, date, language=\"hi\", content_type: str = \"audio/wav\"):\n        \"\"\"Transcribe audio and process observation.\"\"\"\n        text = self.transcribe_audio(audio_bytes, language, content_type)\n        if text.startswith(\"Error\") or text.startswith(\"Audio transcription unavailable\"):\n            return self._create_fallback_data(text, date)\n        return self.process_observation(text, date)\n\n    # ----------------------------\n    # Fallback Data\n    # ----------------------------\n    def _create_fallback_data(self, observation_text, date):\n        \"\"\"Return fallback structured data if LLM or transcription fails.\"\"\"\n        return AnimalMonitoringData(\n            date_or_day=date,\n            animal_observed_on_time=True,\n            clean_drinking_water_provided=True,\n            enclosure_cleaned_properly=True,\n            normal_behaviour_status=True,\n            normal_behaviour_details=None,\n            feed_and_supplements_available=True,\n            feed_given_as_prescribed=True,\n            other_animal_requirements=(observation_text[:200] + \"...\" \n                                       if len(observation_text) > 200 else observation_text),\n            incharge_signature=\"Zoo Keeper\",\n            daily_animal_health_monitoring=f\"Observation recorded on {date}: {observation_text[:100]}{'...' if len(observation_text) > 100 else ''}\",\n            carnivorous_animal_feeding_chart=\"Standard feeding schedule followed\",\n            medicine_stock_register=\"Stock levels adequate\",\n            daily_wildlife_monitoring=f\"Wildlife monitoring completed on {date}\"\n        )\n\n\n# Instantiate global model\nzoo_model = ZooAIModel()\n","size_bytes":7041},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, serial, jsonb, index, integer } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table with role-based access\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique(),\n  password: varchar(\"password\").notNull(),\n  role: varchar(\"role\").notNull(), // 'admin', 'doctor', 'zookeeper'\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Animal monitoring submissions\nexport const submissions = pgTable(\"submissions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  date: varchar(\"date\").notNull(),\n  audioFileName: varchar(\"audio_file_name\"),\n  transcription: text(\"transcription\"),\n  structuredData: jsonb(\"structured_data\"),\n  txtFileName: varchar(\"txt_file_name\"),\n  status: varchar(\"status\").default(\"processed\"), // 'processing', 'processed', 'error'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Comments on submissions from doctors and admins\nexport const comments = pgTable(\"comments\", {\n  id: serial(\"id\").primaryKey(),\n  submissionId: integer(\"submission_id\").notNull().references(() => submissions.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  submissions: many(submissions),\n  comments: many(comments),\n}));\n\nexport const submissionsRelations = relations(submissions, ({ one, many }) => ({\n  user: one(users, {\n    fields: [submissions.userId],\n    references: [users.id],\n  }),\n  comments: many(comments),\n}));\n\nexport const commentsRelations = relations(comments, ({ one }) => ({\n  submission: one(submissions, {\n    fields: [comments.submissionId],\n    references: [submissions.id],\n  }),\n  user: one(users, {\n    fields: [comments.userId],\n    references: [users.id],\n  }),\n}));\n\n// Schemas for validation\nexport const insertUserSchema = createInsertSchema(users).pick({\n  userId: true,\n  password: true,\n  role: true,\n  name: true,\n  email: true,\n});\n\nexport const loginSchema = z.object({\n  userId: z.string().min(1, \"User ID is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const insertSubmissionSchema = createInsertSchema(submissions).pick({\n  date: true,\n  audioFileName: true,\n  transcription: true,\n  structuredData: true,\n  txtFileName: true,\n  status: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).pick({\n  submissionId: true,\n  content: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\nexport type Submission = typeof submissions.$inferSelect;\nexport type InsertSubmission = z.infer<typeof insertSubmissionSchema>;\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\n\n// Extended types with relations\nexport type SubmissionWithUser = Submission & { user: User };\nexport type SubmissionWithComments = Submission & { \n  user: User; \n  comments: (Comment & { user: User })[] \n};\n","size_bytes":3871},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Landing from \"@/pages/landing\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport DoctorDashboard from \"@/pages/doctor-dashboard\";\nimport ZookeeperDashboard from \"@/pages/zookeeper-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 to-emerald-50\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!user ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          {user.role === \"admin\" && <Route path=\"/\" component={AdminDashboard} />}\n          {user.role === \"doctor\" && <Route path=\"/\" component={DoctorDashboard} />}\n          {user.role === \"zookeeper\" && <Route path=\"/\" component={ZookeeperDashboard} />}\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1704},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(120, 20%, 98%);\n  --foreground: hsl(120, 10%, 15%);\n  --card: hsl(120, 20%, 99%);\n  --card-foreground: hsl(120, 10%, 15%);\n  --popover: hsl(120, 20%, 99%);\n  --popover-foreground: hsl(120, 10%, 15%);\n  --primary: hsl(158, 64%, 52%);\n  --primary-foreground: hsl(120, 20%, 99%);\n  --secondary: hsl(120, 15%, 95%);\n  --secondary-foreground: hsl(120, 10%, 15%);\n  --muted: hsl(120, 10%, 85%);\n  --muted-foreground: hsl(120, 5%, 55%);\n  --accent: hsl(158, 60%, 70%);\n  --accent-foreground: hsl(120, 10%, 15%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(120, 20%, 99%);\n  --border: hsl(120, 15%, 85%);\n  --input: hsl(120, 15%, 90%);\n  --ring: hsl(158, 64%, 52%);\n  --radius: 8px;\n  \n  /* Chart colors */\n  --chart-1: hsl(158, 64%, 52%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  \n  /* Sidebar colors */\n  --sidebar: hsl(120, 20%, 99%);\n  --sidebar-foreground: hsl(120, 10%, 15%);\n  --sidebar-primary: hsl(158, 64%, 52%);\n  --sidebar-primary-foreground: hsl(120, 20%, 99%);\n  --sidebar-accent: hsl(158, 60%, 70%);\n  --sidebar-accent-foreground: hsl(120, 10%, 15%);\n  --sidebar-border: hsl(120, 15%, 85%);\n  --sidebar-ring: hsl(158, 64%, 52%);\n  \n  /* Font families */\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  \n  /* Shadow variables */\n  --shadow-2xs: 0px 2px 0px 0px hsl(158, 64%, 52%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(158, 64%, 52%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(158, 64%, 52%, 0.00), 0px 1px 2px -1px hsl(158, 64%, 52%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(158, 64%, 52%, 0.00), 0px 1px 2px -1px hsl(158, 64%, 52%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(158, 64%, 52%, 0.00), 0px 2px 4px -1px hsl(158, 64%, 52%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(158, 64%, 52%, 0.00), 0px 4px 6px -1px hsl(158, 64%, 52%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(158, 64%, 52%, 0.00), 0px 8px 10px -1px hsl(158, 64%, 52%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(158, 64%, 52%, 0.00);\n  \n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(120, 15%, 8%);\n  --foreground: hsl(120, 10%, 90%);\n  --card: hsl(120, 15%, 10%);\n  --card-foreground: hsl(120, 10%, 90%);\n  --popover: hsl(120, 15%, 8%);\n  --popover-foreground: hsl(120, 10%, 90%);\n  --primary: hsl(158, 64%, 52%);\n  --primary-foreground: hsl(120, 15%, 8%);\n  --secondary: hsl(120, 10%, 15%);\n  --secondary-foreground: hsl(120, 10%, 90%);\n  --muted: hsl(120, 8%, 20%);\n  --muted-foreground: hsl(120, 5%, 60%);\n  --accent: hsl(158, 50%, 40%);\n  --accent-foreground: hsl(120, 10%, 90%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(120, 15%, 8%);\n  --border: hsl(120, 10%, 20%);\n  --input: hsl(120, 10%, 15%);\n  --ring: hsl(158, 64%, 52%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom styles for zoo management */\n.calendar-grid {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 2px;\n}\n\n.calendar-day {\n  aspect-ratio: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.calendar-day:hover {\n  background-color: hsl(158, 60%, 85%);\n}\n\n.calendar-day.selected {\n  background-color: hsl(158, 64%, 52%);\n  color: white;\n}\n\n.submission-card {\n  transition: all 0.2s ease;\n}\n\n.submission-card:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n}\n\n/* Recording animation */\n@keyframes pulse-record {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.recording-pulse {\n  animation: pulse-record 1s ease-in-out infinite;\n}\n\n/* Green theme gradient backgrounds */\n.gradient-green-bg {\n  background: linear-gradient(135deg, hsl(120, 20%, 98%) 0%, hsl(158, 30%, 95%) 100%);\n}\n\n/* Focus and hover states for better accessibility */\n.focus\\:ring-green:focus {\n  --tw-ring-color: hsl(158, 64%, 52%);\n}\n\n/* Custom scrollbar for webkit browsers */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(120, 15%, 95%);\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(158, 64%, 52%);\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(158, 64%, 45%);\n}\n","size_bytes":4607},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/audio-recorder.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mic, Square, Upload, Trash2, Play, Pause } from \"lucide-react\";\n\ninterface AudioRecorderProps {\n  onAudioSubmit: (audioBlob: Blob) => void;\n  isSubmitting: boolean;\n  disabled?: boolean;\n}\n\nexport default function AudioRecorder({ onAudioSubmit, isSubmitting, disabled }: AudioRecorderProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);\n  const [audioUrl, setAudioUrl] = useState<string | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  \n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n  const { toast } = useToast();\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      const chunks: BlobPart[] = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunks, { type: \"audio/wav\" });\n        setAudioBlob(blob);\n        setAudioUrl(URL.createObjectURL(blob));\n        \n        // Stop all tracks to release microphone\n        stream.getTracks().forEach(track => track.stop());\n      };\n\n      mediaRecorderRef.current = mediaRecorder;\n      mediaRecorder.start();\n      setIsRecording(true);\n      setRecordingTime(0);\n\n      // Start timer\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n\n    } catch (error) {\n      toast({\n        title: \"Recording Error\",\n        description: \"Could not access microphone. Please check permissions.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      \n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type.startsWith(\"audio/\")) {\n      setAudioBlob(file);\n      setAudioUrl(URL.createObjectURL(file));\n      toast({\n        title: \"Audio Uploaded\",\n        description: \"Audio file has been uploaded successfully\",\n      });\n    } else {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please select a valid audio file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const clearAudio = () => {\n    setAudioBlob(null);\n    if (audioUrl) {\n      URL.revokeObjectURL(audioUrl);\n      setAudioUrl(null);\n    }\n    setIsPlaying(false);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  const togglePlayback = () => {\n    if (!audioRef.current) return;\n\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(false);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(true);\n    }\n  };\n\n  const handleSubmit = () => {\n    if (audioBlob) {\n      onAudioSubmit(audioBlob);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  // Show upload area if no audio and not recording\n  if (!audioBlob && !isRecording) {\n    return (\n      <div className=\"space-y-6\">\n        <div \n          className=\"text-center py-8 border-2 border-dashed border-border rounded-lg hover:border-primary/50 transition-colors\"\n          data-testid=\"audio-upload-area\"\n        >\n          <div className=\"mb-4\">\n            <Mic className=\"text-4xl text-muted-foreground mx-auto\" size={64} />\n          </div>\n          <p className=\"text-muted-foreground mb-4\">Record or upload your daily observation in Hindi</p>\n          <div className=\"space-y-3\">\n            <Button\n              onClick={startRecording}\n              disabled={disabled}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-start-recording\"\n            >\n              <Mic className=\"h-4 w-4 mr-2\" />\n              Start Recording\n            </Button>\n            <div className=\"text-muted-foreground text-sm\">or</div>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"audio/*\"\n              className=\"hidden\"\n              onChange={handleFileUpload}\n              data-testid=\"input-audio-file\"\n            />\n            <Button\n              variant=\"secondary\"\n              onClick={() => fileInputRef.current?.click()}\n              disabled={disabled}\n              data-testid=\"button-upload-audio\"\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Upload Audio File\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show recording status\n  if (isRecording) {\n    const progress = Math.min((recordingTime / 120) * 100, 100); // Max 2 minutes\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\" data-testid=\"recording-status\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-red-500 rounded-full recording-pulse mr-3\"></div>\n              <span className=\"text-red-700 font-medium\">\n                Recording... {formatTime(recordingTime)}\n              </span>\n            </div>\n            <Button\n              onClick={stopRecording}\n              className=\"bg-red-500 text-white hover:bg-red-600\"\n              size=\"sm\"\n              data-testid=\"button-stop-recording\"\n            >\n              <Square className=\"h-4 w-4 mr-2\" />\n              Stop\n            </Button>\n          </div>\n          <Progress value={progress} className=\"w-full\" />\n          {recordingTime >= 120 && (\n            <p className=\"text-red-600 text-sm mt-2\">Maximum recording time reached</p>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Show audio preview and controls\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"p-4 bg-accent/10 border border-accent/20 rounded-lg\" data-testid=\"audio-preview\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <span className=\"font-medium text-accent-foreground flex items-center\">\n            <Mic className=\"h-4 w-4 mr-2\" />\n            Audio Ready\n          </span>\n          <span className=\"text-sm text-muted-foreground\">\n            Duration: {audioUrl && (\n              <audio\n                ref={audioRef}\n                src={audioUrl}\n                onLoadedMetadata={() => {\n                  if (audioRef.current) {\n                    const duration = Math.floor(audioRef.current.duration);\n                    const mins = Math.floor(duration / 60);\n                    const secs = duration % 60;\n                    // Update duration display if needed\n                  }\n                }}\n                onEnded={() => setIsPlaying(false)}\n                style={{ display: \"none\" }}\n              />\n            )}\n          </span>\n        </div>\n        \n        {audioUrl && (\n          <div className=\"mb-3\">\n            <div className=\"flex items-center space-x-3 mb-3\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={togglePlayback}\n                data-testid=\"button-toggle-playback\"\n              >\n                {isPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n              </Button>\n              <div className=\"flex-1 bg-secondary rounded-full h-2\">\n                <div className=\"bg-primary h-2 rounded-full\" style={{ width: \"0%\" }}></div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <div className=\"flex space-x-3\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isSubmitting || !audioBlob}\n            className=\"flex-1\"\n            data-testid=\"button-submit-observation\"\n          >\n            {isSubmitting ? (\n              <>\n                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                Processing...\n              </>\n            ) : (\n              <>\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Submit Observation\n              </>\n            )}\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={clearAudio}\n            disabled={isSubmitting}\n            data-testid=\"button-clear-audio\"\n          >\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            Clear\n          </Button>\n        </div>\n      </div>\n      \n      {isSubmitting && (\n        <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\" data-testid=\"processing-status\">\n          <div className=\"flex items-center\">\n            <div className=\"w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin mr-3\"></div>\n            <span className=\"text-blue-700 font-medium\">\n              Processing audio and generating structured data...\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":9840},"client/src/components/success-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, Edit, X } from \"lucide-react\";\n\ninterface SuccessModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onEdit: () => void;\n}\n\nexport default function SuccessModal({ isOpen, onClose, onEdit }: SuccessModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"success-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"sr-only\">Submission Successful</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"text-center py-4\">\n          <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Check className=\"text-2xl text-primary\" size={32} />\n          </div>\n          <h3 className=\"text-xl font-bold text-card-foreground mb-3\">Thank You!</h3>\n          <p className=\"text-muted-foreground mb-6\">\n            Your observation has been successfully submitted and processed.\n          </p>\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onEdit}\n              className=\"flex-1\"\n              data-testid=\"button-edit-submission\"\n            >\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit Submission\n            </Button>\n            <Button\n              onClick={onClose}\n              className=\"flex-1\"\n              data-testid=\"button-close-modal\"\n            >\n              <X className=\"h-4 w-4 mr-2\" />\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1739},"client/src/hooks/use-auth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: string;\n  userId: string;\n  role: \"admin\" | \"doctor\" | \"zookeeper\";\n  name: string;\n}\n\ninterface LoginCredentials {\n  userId: string;\n  password: string;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n\nexport function useLogin() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (credentials: LoginCredentials) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData([\"/api/auth/user\"], data.user);\n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back, ${data.user.name}!`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useLogout() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/user\"], null);\n      queryClient.invalidateQueries();\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n  });\n}\n","size_bytes":1788},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/audio-utils.ts":{"content":"/**\n * Audio utility functions for the zoo management system\n */\n\nexport interface AudioConstraints {\n  maxDuration: number; // in seconds\n  maxFileSize: number; // in bytes\n  supportedFormats: string[];\n}\n\nexport const DEFAULT_AUDIO_CONSTRAINTS: AudioConstraints = {\n  maxDuration: 300, // 5 minutes\n  maxFileSize: 50 * 1024 * 1024, // 50MB\n  supportedFormats: ['audio/wav', 'audio/mp3', 'audio/m4a', 'audio/ogg'],\n};\n\n/**\n * Validates an audio file against the given constraints\n */\nexport function validateAudioFile(file: File, constraints = DEFAULT_AUDIO_CONSTRAINTS): { isValid: boolean; error?: string } {\n  // Check file size\n  if (file.size > constraints.maxFileSize) {\n    return {\n      isValid: false,\n      error: `File size (${Math.round(file.size / 1024 / 1024)}MB) exceeds maximum allowed size (${Math.round(constraints.maxFileSize / 1024 / 1024)}MB)`,\n    };\n  }\n\n  // Check file format\n  if (!constraints.supportedFormats.includes(file.type)) {\n    return {\n      isValid: false,\n      error: `File format ${file.type} is not supported. Supported formats: ${constraints.supportedFormats.join(', ')}`,\n    };\n  }\n\n  return { isValid: true };\n}\n\n/**\n * Gets the duration of an audio file\n */\nexport function getAudioDuration(file: File): Promise<number> {\n  return new Promise((resolve, reject) => {\n    const audio = document.createElement('audio');\n    audio.preload = 'metadata';\n    \n    audio.onloadedmetadata = () => {\n      window.URL.revokeObjectURL(audio.src);\n      resolve(audio.duration);\n    };\n    \n    audio.onerror = () => {\n      window.URL.revokeObjectURL(audio.src);\n      reject(new Error('Failed to load audio metadata'));\n    };\n    \n    audio.src = URL.createObjectURL(file);\n  });\n}\n\n/**\n * Converts audio blob to a specific format if needed\n */\nexport function convertAudioBlob(blob: Blob, targetType: string = 'audio/wav'): Blob {\n  if (blob.type === targetType) {\n    return blob;\n  }\n  \n  // For now, return the original blob\n  // In a production environment, you might want to use a library like FFmpeg.js\n  // to convert between audio formats\n  return blob;\n}\n\n/**\n * Formats duration in seconds to MM:SS format\n */\nexport function formatDuration(seconds: number): string {\n  const mins = Math.floor(seconds / 60);\n  const secs = Math.floor(seconds % 60);\n  return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n}\n\n/**\n * Creates a visual representation of audio levels (for recording UI)\n */\nexport class AudioVisualizer {\n  private audioContext: AudioContext | null = null;\n  private analyser: AnalyserNode | null = null;\n  private dataArray: Uint8Array | null = null;\n  private animationId: number | null = null;\n\n  async initialize(stream: MediaStream): Promise<void> {\n    try {\n      this.audioContext = new AudioContext();\n      this.analyser = this.audioContext.createAnalyser();\n      this.analyser.fftSize = 256;\n      \n      const source = this.audioContext.createMediaStreamSource(stream);\n      source.connect(this.analyser);\n      \n      this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    } catch (error) {\n      console.error('Failed to initialize audio visualizer:', error);\n      throw error;\n    }\n  }\n\n  startVisualization(callback: (levels: number[]) => void): void {\n    if (!this.analyser || !this.dataArray) return;\n\n    const animate = () => {\n      this.analyser!.getByteFrequencyData(this.dataArray!);\n      \n      // Convert to normalized levels (0-1)\n      const levels = Array.from(this.dataArray!).map(value => value / 255);\n      callback(levels);\n      \n      this.animationId = requestAnimationFrame(animate);\n    };\n    \n    animate();\n  }\n\n  stopVisualization(): void {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n  }\n\n  cleanup(): void {\n    this.stopVisualization();\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\n\n/**\n * Records audio using MediaRecorder API\n */\nexport class AudioRecorder {\n  private mediaRecorder: MediaRecorder | null = null;\n  private audioChunks: Blob[] = [];\n  private stream: MediaStream | null = null;\n\n  async startRecording(constraints: MediaStreamConstraints = { audio: true }): Promise<void> {\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia(constraints);\n      this.mediaRecorder = new MediaRecorder(this.stream);\n      this.audioChunks = [];\n\n      return new Promise((resolve, reject) => {\n        this.mediaRecorder!.ondataavailable = (event) => {\n          if (event.data.size > 0) {\n            this.audioChunks.push(event.data);\n          }\n        };\n\n        this.mediaRecorder!.onstart = () => {\n          resolve();\n        };\n\n        this.mediaRecorder!.onerror = (event) => {\n          reject(new Error('Recording failed'));\n        };\n\n        this.mediaRecorder!.start(1000); // Collect data every second\n      });\n    } catch (error) {\n      throw new Error(`Failed to start recording: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  stopRecording(): Promise<Blob> {\n    return new Promise((resolve, reject) => {\n      if (!this.mediaRecorder || this.mediaRecorder.state === 'inactive') {\n        reject(new Error('No active recording'));\n        return;\n      }\n\n      this.mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(this.audioChunks, { type: 'audio/wav' });\n        this.cleanup();\n        resolve(audioBlob);\n      };\n\n      this.mediaRecorder.stop();\n    });\n  }\n\n  isRecording(): boolean {\n    return this.mediaRecorder?.state === 'recording';\n  }\n\n  cleanup(): void {\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n      this.stream = null;\n    }\n    if (this.mediaRecorder) {\n      this.mediaRecorder = null;\n    }\n    this.audioChunks = [];\n  }\n}\n\n/**\n * Checks if the browser supports audio recording\n */\nexport function checkAudioSupport(): { supported: boolean; error?: string } {\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    return {\n      supported: false,\n      error: 'Audio recording is not supported in this browser',\n    };\n  }\n\n  if (!window.MediaRecorder) {\n    return {\n      supported: false,\n      error: 'MediaRecorder is not supported in this browser',\n    };\n  }\n\n  return { supported: true };\n}\n\n/**\n * Requests microphone permissions\n */\nexport async function requestMicrophonePermission(): Promise<{ granted: boolean; error?: string }> {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    stream.getTracks().forEach(track => track.stop()); // Stop immediately after permission check\n    return { granted: true };\n  } catch (error) {\n    let errorMessage = 'Microphone access denied';\n    \n    if (error instanceof DOMException) {\n      if (error.name === 'NotAllowedError') {\n        errorMessage = 'Microphone permission denied. Please allow microphone access and try again.';\n      } else if (error.name === 'NotFoundError') {\n        errorMessage = 'No microphone found. Please connect a microphone and try again.';\n      } else if (error.name === 'NotReadableError') {\n        errorMessage = 'Microphone is already in use by another application.';\n      }\n    }\n    \n    return {\n      granted: false,\n      error: errorMessage,\n    };\n  }\n}\n","size_bytes":7362},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth, useLogout } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { \n  PawPrint, \n  FileText, \n  Clock, \n  Users, \n  Heart, \n  LogOut, \n  Eye, \n  MessageSquare, \n  Download,\n  ArrowUp,\n  ArrowDown,\n  Check,\n  Filter\n} from \"lucide-react\";\n\ninterface SubmissionWithUser {\n  submissions: {\n    id: number;\n    date: string;\n    status: string;\n    createdAt: string;\n    structuredData?: any;\n  };\n  users: {\n    id: string;\n    name: string;\n    userId: string;\n  };\n}\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const logout = useLogout();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedKeeper, setSelectedKeeper] = useState<string>(\"all\");\n  const [newComment, setNewComment] = useState<string>(\"\");\n  const [commentingOn, setCommentingOn] = useState<number | null>(null);\n\n  const { data: submissions = [], isLoading: submissionsLoading } = useQuery<SubmissionWithUser[]>({\n    queryKey: [\"/api/submissions/all\"],\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  const addCommentMutation = useMutation({\n    mutationFn: async ({ submissionId, content }: { submissionId: number; content: string }) => {\n      const response = await apiRequest(\"POST\", `/api/submissions/${submissionId}/comments`, { content });\n      return response.json();\n    },\n    onSuccess: () => {\n      setNewComment(\"\");\n      setCommentingOn(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions/all\"] });\n      toast({\n        title: \"Comment Added\",\n        description: \"Your comment has been added successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Add Comment\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddComment = (submissionId: number) => {\n    if (!newComment.trim()) {\n      toast({\n        title: \"Comment Required\",\n        description: \"Please enter a comment\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addCommentMutation.mutate({ submissionId, content: newComment });\n  };\n\n  const handleDownloadReport = async (submissionId: number) => {\n    try {\n      const response = await fetch(`/api/submissions/${submissionId}/download`, {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to download report\");\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.style.display = \"none\";\n      a.href = url;\n      a.download = `report_${submissionId}.txt`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Download Started\",\n        description: \"Report is being downloaded\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download the report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  // Calculate stats\n  const totalSubmissions = submissions.length;\n  const pendingReviews = submissions.filter(s => s.submissions.status === \"processing\").length;\n  const activeKeepers = Array.from(new Set(submissions.map(s => s.users.id))).length;\n\n  // Filter submissions by keeper\n  const filteredSubmissions = selectedKeeper === \"all\" \n    ? submissions \n    : submissions.filter(s => s.users.id === selectedKeeper);\n\n  // Get unique keepers for filter\n  const uniqueKeepers = Array.from(new Set(submissions.map(s => s.users.id))).map(id => {\n    const submission = submissions.find(s => s.users.id === id);\n    return { id, name: submission?.users.name || '' };\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n      <header className=\"bg-white shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <PawPrint className=\"text-2xl text-primary\" />\n              <h1 className=\"text-xl font-bold text-foreground\">Zoo Management System</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"text-current-user\">\n                {user?.name || \"Admin\"}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => logout.mutate()}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-2\">Admin Dashboard</h2>\n          <p className=\"text-muted-foreground\">Manage zoo operations and review all submissions</p>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"shadow-lg border border-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-1\">Total Submissions</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-total-submissions\">\n                    {totalSubmissions}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"text-primary text-xl\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <ArrowUp className=\"text-primary mr-1\" size={16} />\n                <span className=\"text-primary font-medium\">12%</span>\n                <span className=\"text-muted-foreground ml-1\">vs last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-lg border border-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-1\">Pending Reviews</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-pending-reviews\">\n                    {pendingReviews}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"text-orange-500 text-xl\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <ArrowDown className=\"text-red-500 mr-1\" size={16} />\n                <span className=\"text-red-500 font-medium\">5%</span>\n                <span className=\"text-muted-foreground ml-1\">vs last week</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-lg border border-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-1\">Active Keepers</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-active-keepers\">\n                    {activeKeepers}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Users className=\"text-primary text-xl\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <Check className=\"text-primary mr-1\" size={16} />\n                <span className=\"text-primary font-medium\">All active</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-lg border border-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-1\">System Health</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\">98.5%</p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Heart className=\"text-primary text-xl\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <Check className=\"text-primary mr-1\" size={16} />\n                <span className=\"text-primary font-medium\">Excellent</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Submissions Table */}\n        <Card className=\"shadow-lg border border-border\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>All Submissions</CardTitle>\n              <div className=\"flex items-center space-x-3\">\n                <Select value={selectedKeeper} onValueChange={setSelectedKeeper}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-keeper-filter\">\n                    <SelectValue placeholder=\"Filter by keeper\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Keepers</SelectItem>\n                    {uniqueKeepers.map((keeper) => (\n                      <SelectItem key={keeper.id} value={keeper.id}>\n                        {keeper.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Button variant=\"outline\" data-testid=\"button-export\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {submissionsLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                <p className=\"text-muted-foreground\">Loading submissions...</p>\n              </div>\n            ) : filteredSubmissions.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No submissions found</p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-border\">\n                      <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Date</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Keeper</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Status</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredSubmissions.map((item) => (\n                      <tr \n                        key={item.submissions.id} \n                        className=\"border-b border-border hover:bg-secondary/30 transition-colors\"\n                        data-testid={`submission-row-${item.submissions.id}`}\n                      >\n                        <td className=\"py-4 px-4 text-card-foreground\">\n                          {formatDate(item.submissions.date)}\n                        </td>\n                        <td className=\"py-4 px-4 text-card-foreground\">\n                          {item.users.name}\n                        </td>\n                        <td className=\"py-4 px-4\">\n                          <span className={`px-3 py-1 rounded-full text-xs font-medium ${\n                            item.submissions.status === \"processed\" \n                              ? \"bg-primary/20 text-primary\" \n                              : \"bg-orange-100 text-orange-600\"\n                          }`}>\n                            {item.submissions.status === \"processed\" ? \"Processed\" : \"Pending Review\"}\n                          </span>\n                        </td>\n                        <td className=\"py-4 px-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              data-testid={`button-view-${item.submissions.id}`}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setCommentingOn(\n                                commentingOn === item.submissions.id ? null : item.submissions.id\n                              )}\n                              data-testid={`button-comment-${item.submissions.id}`}\n                            >\n                              <MessageSquare className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDownloadReport(item.submissions.id)}\n                              data-testid={`button-download-${item.submissions.id}`}\n                            >\n                              <Download className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                          \n                          {commentingOn === item.submissions.id && (\n                            <div className=\"mt-3 p-3 bg-secondary/30 rounded-lg\">\n                              <Textarea\n                                placeholder=\"Add your comment...\"\n                                value={newComment}\n                                onChange={(e) => setNewComment(e.target.value)}\n                                className=\"mb-2\"\n                                rows={2}\n                                data-testid={`textarea-comment-${item.submissions.id}`}\n                              />\n                              <div className=\"flex space-x-2\">\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => handleAddComment(item.submissions.id)}\n                                  disabled={addCommentMutation.isPending}\n                                  data-testid={`button-submit-comment-${item.submissions.id}`}\n                                >\n                                  {addCommentMutation.isPending ? \"Adding...\" : \"Add Comment\"}\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    setCommentingOn(null);\n                                    setNewComment(\"\");\n                                  }}\n                                  data-testid={`button-cancel-comment-${item.submissions.id}`}\n                                >\n                                  Cancel\n                                </Button>\n                              </div>\n                            </div>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":16944},"client/src/pages/doctor-dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth, useLogout } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { \n  PawPrint, \n  Heart, \n  AlertTriangle, \n  MessageSquarePlus, \n  LogOut, \n  Filter,\n  Send\n} from \"lucide-react\";\n\ninterface SubmissionWithUser {\n  submissions: {\n    id: number;\n    date: string;\n    status: string;\n    createdAt: string;\n    structuredData?: any;\n  };\n  users: {\n    id: string;\n    name: string;\n    userId: string;\n  };\n}\n\nexport default function DoctorDashboard() {\n  const { user } = useAuth();\n  const logout = useLogout();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedFilter, setSelectedFilter] = useState<string>(\"all\");\n  const [comments, setComments] = useState<{ [key: number]: string }>({});\n\n  const { data: submissions = [], isLoading: submissionsLoading } = useQuery<SubmissionWithUser[]>({\n    queryKey: [\"/api/submissions/all\"],\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  const addCommentMutation = useMutation({\n    mutationFn: async ({ submissionId, content }: { submissionId: number; content: string }) => {\n      const response = await apiRequest(\"POST\", `/api/submissions/${submissionId}/comments`, { content });\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      setComments(prev => ({ ...prev, [variables.submissionId]: \"\" }));\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions/all\"] });\n      toast({\n        title: \"Medical Comment Added\",\n        description: \"Your medical review has been saved successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Add Comment\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddComment = (submissionId: number) => {\n    const comment = comments[submissionId];\n    if (!comment?.trim()) {\n      toast({\n        title: \"Comment Required\",\n        description: \"Please enter your medical review\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addCommentMutation.mutate({ submissionId, content: comment });\n  };\n\n  const updateComment = (submissionId: number, value: string) => {\n    setComments(prev => ({ ...prev, [submissionId]: value }));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString(\"en-US\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const getPriorityLevel = (structuredData: any) => {\n    if (!structuredData) return \"normal\";\n    \n    // Determine priority based on health indicators\n    const hasAbnormalBehavior = !structuredData.normal_behaviour_status;\n    const hasHealthIssues = structuredData.normal_behaviour_details?.toLowerCase().includes(\"sick\") ||\n                           structuredData.normal_behaviour_details?.toLowerCase().includes(\"ill\") ||\n                           structuredData.daily_animal_health_monitoring?.toLowerCase().includes(\"urgent\");\n    \n    if (hasAbnormalBehavior || hasHealthIssues) return \"high\";\n    return \"normal\";\n  };\n\n  // Calculate stats\n  const totalReports = submissions.length;\n  const reviewsNeeded = submissions.filter(s => \n    getPriorityLevel(s.submissions.structuredData) === \"high\"\n  ).length;\n\n  // Filter submissions\n  const filteredSubmissions = selectedFilter === \"all\" \n    ? submissions \n    : submissions.filter(s => getPriorityLevel(s.submissions.structuredData) === selectedFilter);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n      <header className=\"bg-white shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <PawPrint className=\"text-2xl text-primary\" />\n              <h1 className=\"text-xl font-bold text-foreground\">Zoo Management System</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"text-current-user\">\n                {user?.name || \"Doctor\"}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => logout.mutate()}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-2\">Doctor Dashboard</h2>\n          <p className=\"text-muted-foreground\">Review animal health reports and provide medical insights</p>\n        </div>\n\n        {/* Health Overview */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"shadow-lg border border-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-1\">Health Reports</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-total-reports\">\n                    {totalReports}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Heart className=\"text-primary text-xl\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-muted-foreground\">This month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-lg border border-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-1\">Medical Reviews Needed</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-reviews-needed\">\n                    {reviewsNeeded}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                  <AlertTriangle className=\"text-orange-500 text-xl\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-orange-600 font-medium\">Requires attention</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-lg border border-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-1\">Comments Added</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\">23</p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <MessageSquarePlus className=\"text-primary text-xl\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-muted-foreground\">Last 7 days</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Health Reports */}\n        <Card className=\"shadow-lg border border-border\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Health Reports for Review</CardTitle>\n              <div className=\"flex items-center space-x-3\">\n                <Select value={selectedFilter} onValueChange={setSelectedFilter}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-priority-filter\">\n                    <SelectValue placeholder=\"Filter by priority\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Reports</SelectItem>\n                    <SelectItem value=\"high\">High Priority</SelectItem>\n                    <SelectItem value=\"normal\">Normal</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button variant=\"outline\" data-testid=\"button-filter\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  Filter\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {submissionsLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                <p className=\"text-muted-foreground\">Loading health reports...</p>\n              </div>\n            ) : filteredSubmissions.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No health reports found</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredSubmissions.map((item) => {\n                  const priority = getPriorityLevel(item.submissions.structuredData);\n                  const structuredData = item.submissions.structuredData || {};\n                  \n                  return (\n                    <div\n                      key={item.submissions.id}\n                      className=\"p-4 border border-border rounded-lg hover:shadow-md transition-all\"\n                      data-testid={`health-report-${item.submissions.id}`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-3\">\n                            <h4 className=\"font-semibold text-card-foreground\">\n                              {formatDate(item.submissions.date)}\n                            </h4>\n                            <span className={`px-3 py-1 rounded-full text-xs font-medium ${\n                              priority === \"high\" \n                                ? \"bg-orange-100 text-orange-600\" \n                                : \"bg-green-100 text-green-600\"\n                            }`}>\n                              {priority === \"high\" ? \"High Priority\" : \"Normal\"}\n                            </span>\n                            <span className=\"text-sm text-muted-foreground\">\n                              Reported by: {item.users.name}\n                            </span>\n                          </div>\n\n                          <div className=\"grid md:grid-cols-2 gap-4 mb-4\">\n                            <div>\n                              <p className=\"text-sm text-muted-foreground mb-1\">Animal Behavior</p>\n                              <p className=\"text-sm text-card-foreground\">\n                                {structuredData.normal_behaviour_status \n                                  ? \"Normal behavior observed\" \n                                  : structuredData.normal_behaviour_details || \"Abnormal behavior noted\"}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-sm text-muted-foreground mb-1\">Feeding Status</p>\n                              <p className=\"text-sm text-card-foreground\">\n                                {structuredData.feed_given_as_prescribed \n                                  ? \"Feed given as prescribed\" \n                                  : \"Feeding issues noted\"}\n                                {structuredData.clean_drinking_water_provided \n                                  ? \", water available\" \n                                  : \", water shortage\"}\n                              </p>\n                            </div>\n                          </div>\n\n                          <div className=\"mb-4\">\n                            <p className=\"text-sm text-muted-foreground mb-1\">Health Monitoring Summary</p>\n                            <p className=\"text-sm text-card-foreground\">\n                              {structuredData.daily_animal_health_monitoring || \n                               \"No detailed health monitoring data available\"}\n                            </p>\n                          </div>\n\n                          {structuredData.other_animal_requirements && (\n                            <div className=\"mb-4\">\n                              <p className=\"text-sm text-muted-foreground mb-1\">Special Requirements</p>\n                              <p className=\"text-sm text-card-foreground\">\n                                {structuredData.other_animal_requirements}\n                              </p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Add Medical Comment Section */}\n                      <div className=\"border-t border-border pt-4\">\n                        <div className=\"flex space-x-3\">\n                          <div className=\"flex-1\">\n                            <Textarea\n                              placeholder=\"Add your medical comments and recommendations...\"\n                              value={comments[item.submissions.id] || \"\"}\n                              onChange={(e) => updateComment(item.submissions.id, e.target.value)}\n                              className=\"resize-none\"\n                              rows={3}\n                              data-testid={`textarea-medical-comment-${item.submissions.id}`}\n                            />\n                          </div>\n                          <Button\n                            onClick={() => handleAddComment(item.submissions.id)}\n                            disabled={addCommentMutation.isPending}\n                            className=\"whitespace-nowrap\"\n                            data-testid={`button-add-medical-comment-${item.submissions.id}`}\n                          >\n                            <Send className=\"h-4 w-4 mr-2\" />\n                            {addCommentMutation.isPending ? \"Adding...\" : \"Add Comment\"}\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":15356},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useLogin } from \"@/hooks/use-auth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { PawPrint, Bus, UserRound, Users } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  userId: z.string().min(1, \"User ID is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Landing() {\n  const [selectedRole, setSelectedRole] = useState<string | null>(null);\n  const login = useLogin();\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      userId: \"\",\n      password: \"\",\n    },\n  });\n\n  const handleRoleSelect = (role: string) => {\n    setSelectedRole(role);\n  };\n\n  const handleBackToRoles = () => {\n    setSelectedRole(null);\n    form.reset();\n  };\n\n  const onSubmit = (data: LoginFormData) => {\n    login.mutate(data);\n  };\n\n  const roleConfig = {\n    admin: {\n      icon: Bus,\n      title: \"Admin\",\n      description: \"Manage system settings, view all reports, and oversee zoo operations\",\n      tags: [\"System Management\", \"Reports\", \"User Management\"],\n    },\n    doctor: {\n      icon: UserRound,\n      title: \"Doctor\",\n      description: \"Review animal health reports, add medical comments, and monitor wellness\",\n      tags: [\"Health Monitoring\", \"Medical Review\", \"Comments\"],\n    },\n    zookeeper: {\n      icon: Users,\n      title: \"Zoo Keeper\",\n      description: \"Submit daily observations, record animal behavior, and maintain logs\",\n      tags: [\"Daily Reports\", \"Audio Recording\", \"Observations\"],\n    },\n  };\n\n  if (selectedRole) {\n    const config = roleConfig[selectedRole as keyof typeof roleConfig];\n    const Icon = config.icon;\n\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n        <header className=\"bg-white shadow-sm border-b border-border\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center h-16\">\n              <div className=\"flex items-center space-x-3\">\n                <PawPrint className=\"text-2xl text-primary\" />\n                <h1 className=\"text-xl font-bold text-foreground\">Zoo Management System</h1>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"max-w-md mx-auto\">\n            <Card className=\"shadow-lg border border-border\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center mb-8\">\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Icon className=\"text-2xl text-primary\" size={32} />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-card-foreground\">{config.title} Login</h3>\n                  <p className=\"text-muted-foreground mt-2\">Enter your credentials to continue</p>\n                </div>\n\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"userId\" className=\"block text-sm font-medium text-card-foreground mb-2\">\n                      User ID\n                    </Label>\n                    <Input\n                      id=\"userId\"\n                      type=\"text\"\n                      placeholder=\"Enter your user ID\"\n                      data-testid=\"input-userId\"\n                      {...form.register(\"userId\")}\n                      className=\"focus:ring-2 focus:ring-ring focus:border-transparent\"\n                    />\n                    {form.formState.errors.userId && (\n                      <p className=\"text-destructive text-sm mt-1\">{form.formState.errors.userId.message}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"password\" className=\"block text-sm font-medium text-card-foreground mb-2\">\n                      Password\n                    </Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      placeholder=\"Enter your password\"\n                      data-testid=\"input-password\"\n                      {...form.register(\"password\")}\n                      className=\"focus:ring-2 focus:ring-ring focus:border-transparent\"\n                    />\n                    {form.formState.errors.password && (\n                      <p className=\"text-destructive text-sm mt-1\">{form.formState.errors.password.message}</p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={login.isPending}\n                    data-testid=\"button-login\"\n                  >\n                    {login.isPending ? \"Logging in...\" : \"Login\"}\n                  </Button>\n                </form>\n\n                <div className=\"mt-6 text-center\">\n                  <Button\n                    variant=\"ghost\"\n                    onClick={handleBackToRoles}\n                    className=\"text-primary hover:text-primary/80\"\n                    data-testid=\"button-back\"\n                  >\n                    ← Back to role selection\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n      <header className=\"bg-white shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <PawPrint className=\"text-2xl text-primary\" />\n              <h1 className=\"text-xl font-bold text-foreground\">Zoo Management System</h1>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">Welcome to Zoo Management System</h2>\n            <p className=\"text-lg text-muted-foreground\">Please select your role to continue</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {Object.entries(roleConfig).map(([role, config]) => {\n              const Icon = config.icon;\n              return (\n                <Card\n                  key={role}\n                  className=\"shadow-lg border border-border hover:shadow-xl transition-all duration-300 cursor-pointer group\"\n                  onClick={() => handleRoleSelect(role)}\n                  data-testid={`card-role-${role}`}\n                >\n                  <CardContent className=\"p-8 text-center\">\n                    <div className=\"w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:bg-primary/20 transition-colors\">\n                      <Icon className=\"text-3xl text-primary\" size={48} />\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-card-foreground mb-3\">{config.title}</h3>\n                    <p className=\"text-muted-foreground mb-6\">{config.description}</p>\n                    <div className=\"flex flex-wrap gap-2 justify-center\">\n                      {config.tags.map((tag) => (\n                        <span\n                          key={tag}\n                          className=\"px-3 py-1 bg-secondary text-secondary-foreground rounded-full text-xs\"\n                        >\n                          {tag}\n                        </span>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8345},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/zookeeper-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth, useLogout } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { PawPrint, Calendar, Mic, History, Edit, Eye, LogOut } from \"lucide-react\";\nimport CalendarCustom from \"@/components/ui/calendar-custom\";\nimport AudioRecorder from \"@/components/audio-recorder\";\nimport SuccessModal from \"@/components/success-modal\";\nimport ObservationDetailModal from \"@/components/observation-detail-modal\";\n\ninterface Submission {\n  id: number;\n  date: string;\n  status: string;\n  createdAt: string;\n  structuredData?: any;\n}\n\nexport default function ZookeeperDashboard() {\n  const { user } = useAuth();\n  const logout = useLogout();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [lastSubmissionId, setLastSubmissionId] = useState<number | null>(null);\n\n  const { data: submissions = [], isLoading: submissionsLoading } = useQuery<Submission[]>({\n    queryKey: [\"/api/submissions/my\"],\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  const submitAudioMutation = useMutation({\n    mutationFn: async ({ audioBlob, date }: { audioBlob: Blob; date: string }) => {\n      const formData = new FormData();\n      formData.append(\"audio\", audioBlob, \"observation.wav\");\n      formData.append(\"date\", date);\n\n      const response = await fetch(\"/api/submissions/audio\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || \"Failed to submit audio\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setLastSubmissionId(data.submissionId);\n      setShowSuccessModal(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions/my\"] });\n      toast({\n        title: \"Success\",\n        description: \"Your observation has been processed successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message || \"Failed to process audio observation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAudioSubmit = (audioBlob: Blob) => {\n    if (!selectedDate) {\n      toast({\n        title: \"Date Required\",\n        description: \"Please select a date for your observation\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitAudioMutation.mutate({ audioBlob, date: selectedDate });\n  };\n\n  const handleEditSubmission = (submissionId: number) => {\n    // TODO: Implement edit functionality\n    toast({\n      title: \"Edit Feature\",\n      description: \"Edit functionality will be available soon\",\n    });\n  };\n\n  const handleViewSubmission = (submissionId: number) => {\n    // View functionality is now handled by ObservationDetailModal\n    // Modal will open when the View button is clicked\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString(\"en-US\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n      <header className=\"bg-white shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <PawPrint className=\"text-2xl text-primary\" />\n              <h1 className=\"text-xl font-bold text-foreground\">Zoo Management System</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"text-current-user\">\n                {user?.name || \"Zoo Keeper\"}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => logout.mutate()}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-2\">Zoo Keeper Dashboard</h2>\n          <p className=\"text-muted-foreground\">Record daily observations and submit audio reports</p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Calendar Section */}\n          <Card className=\"shadow-lg border border-border\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Calendar className=\"mr-3 text-primary\" />\n                Select Date for Observation\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <CalendarCustom\n                selectedDate={selectedDate}\n                onDateSelect={setSelectedDate}\n              />\n              {selectedDate && (\n                <div className=\"mt-4 p-3 bg-accent/10 rounded-lg\">\n                  <p className=\"text-sm text-accent-foreground\">\n                    <span className=\"font-medium\">Selected Date:</span> {formatDate(selectedDate)}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Audio Recording Section */}\n          <Card className=\"shadow-lg border border-border\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Mic className=\"mr-3 text-primary\" />\n                Record Observation (Hindi)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <AudioRecorder\n                onAudioSubmit={handleAudioSubmit}\n                isSubmitting={submitAudioMutation.isPending}\n                disabled={!selectedDate}\n              />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Submissions */}\n        <Card className=\"mt-8 shadow-lg border border-border\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <History className=\"mr-3 text-primary\" />\n              Recent Submissions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {submissionsLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                <p className=\"text-muted-foreground\">Loading submissions...</p>\n              </div>\n            ) : submissions.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No submissions yet. Record your first observation!</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {submissions.map((submission) => (\n                  <div\n                    key={submission.id}\n                    className=\"submission-card p-4 bg-secondary/50 rounded-lg border border-border\"\n                    data-testid={`submission-${submission.id}`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <Mic className=\"text-primary\" size={20} />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-card-foreground\">{formatDate(submission.date)}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Submitted at {formatTime(submission.createdAt)}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"px-3 py-1 bg-primary/20 text-primary rounded-full text-xs font-medium\">\n                          {submission.status === \"processed\" ? \"Processed\" : \"Processing\"}\n                        </span>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEditSubmission(submission.id)}\n                          data-testid={`button-edit-${submission.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <ObservationDetailModal \n                          submissionId={submission.id}\n                          trigger={\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              data-testid={`button-view-${submission.id}`}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                          }\n                        />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <SuccessModal\n          isOpen={showSuccessModal}\n          onClose={() => setShowSuccessModal(false)}\n          onEdit={() => {\n            if (lastSubmissionId) {\n              handleEditSubmission(lastSubmissionId);\n            }\n            setShowSuccessModal(false);\n          }}\n        />\n      </main>\n    </div>\n  );\n}\n","size_bytes":10262},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar-custom.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface CalendarCustomProps {\n  selectedDate: string | null;\n  onDateSelect: (date: string) => void;\n}\n\nexport default function CalendarCustom({ selectedDate, onDateSelect }: CalendarCustomProps) {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n\n  const getDaysInMonth = (date: Date) => {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n  };\n\n  const getFirstDayOfMonth = (date: Date) => {\n    return new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n  };\n\n  const formatDateString = (year: number, month: number, day: number) => {\n    return `${year}-${String(month + 1).padStart(2, \"0\")}-${String(day).padStart(2, \"0\")}`;\n  };\n\n  const parseSelectedDate = () => {\n    if (!selectedDate) return null;\n    return new Date(selectedDate);\n  };\n\n  const isSelectedDate = (day: number) => {\n    const parsed = parseSelectedDate();\n    if (!parsed) return false;\n    \n    return (\n      parsed.getFullYear() === currentMonth.getFullYear() &&\n      parsed.getMonth() === currentMonth.getMonth() &&\n      parsed.getDate() === day\n    );\n  };\n\n  const handleDateClick = (day: number) => {\n    const dateString = formatDateString(\n      currentMonth.getFullYear(),\n      currentMonth.getMonth(),\n      day\n    );\n    onDateSelect(dateString);\n  };\n\n  const previousMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1));\n  };\n\n  const nextMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1));\n  };\n\n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  const daysInMonth = getDaysInMonth(currentMonth);\n  const firstDay = getFirstDayOfMonth(currentMonth);\n  const days = Array.from({ length: daysInMonth }, (_, i) => i + 1);\n  const emptyDays = Array.from({ length: firstDay }, (_, i) => i);\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-4\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={previousMonth}\n          className=\"p-2 hover:bg-secondary rounded-lg transition-colors\"\n          data-testid=\"button-previous-month\"\n        >\n          <ChevronLeft className=\"h-4 w-4 text-muted-foreground\" />\n        </Button>\n        <h4 className=\"text-lg font-semibold text-card-foreground\" data-testid=\"text-current-month\">\n          {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}\n        </h4>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={nextMonth}\n          className=\"p-2 hover:bg-secondary rounded-lg transition-colors\"\n          data-testid=\"button-next-month\"\n        >\n          <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />\n        </Button>\n      </div>\n\n      <div className=\"calendar-grid border border-border rounded-lg overflow-hidden\">\n        {/* Day headers */}\n        {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map((day) => (\n          <div key={day} className=\"bg-secondary text-center py-2 text-sm font-medium text-secondary-foreground\">\n            {day}\n          </div>\n        ))}\n        \n        {/* Empty cells for days before month starts */}\n        {emptyDays.map((empty) => (\n          <div key={`empty-${empty}`} className=\"calendar-day bg-muted/30\"></div>\n        ))}\n        \n        {/* Days of the month */}\n        {days.map((day) => (\n          <div\n            key={day}\n            className={`calendar-day text-sm cursor-pointer border border-border transition-all ${\n              isSelectedDate(day)\n                ? \"bg-primary text-primary-foreground selected\"\n                : \"bg-white hover:bg-accent/20\"\n            }`}\n            onClick={() => handleDateClick(day)}\n            data-testid={`calendar-day-${day}`}\n          >\n            {day}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4094},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/observation-detail-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Eye, Calendar, User, FileText, Activity, MapPin, Clock, Cloud } from \"lucide-react\";\n\ninterface ObservationDetailModalProps {\n  submissionId: number;\n  trigger?: React.ReactNode;\n}\n\ninterface SubmissionDetail {\n  id: number;\n  date: string;\n  audioFileName?: string;\n  transcription?: string;\n  structuredData?: {\n    animals?: Array<{\n      species?: string;\n      name?: string;\n      behavior?: string;\n      health_status?: string;\n      location?: string;\n      notes?: string;\n    }>;\n    environment?: {\n      weather?: string;\n      temperature?: string;\n      humidity?: string;\n      notes?: string;\n    };\n    keeper_observations?: {\n      general_notes?: string;\n      concerns?: string;\n      recommendations?: string;\n    };\n    timestamp?: string;\n    observation_type?: string;\n  };\n  txtFileName?: string;\n  status: string;\n  createdAt: string;\n  user?: {\n    name: string;\n    userId: string;\n  };\n}\n\nexport default function ObservationDetailModal({ submissionId, trigger }: ObservationDetailModalProps) {\n  const [open, setOpen] = useState(false);\n\n  const { data: submission, isLoading } = useQuery<SubmissionDetail>({\n    queryKey: [\"/api/submissions\", submissionId],\n    enabled: open,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString(\"en-US\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const renderAnimalObservations = (animals: any[]) => {\n    if (!animals || animals.length === 0) return null;\n\n    return animals.map((animal, index) => (\n      <Card key={index} className=\"mb-4\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg flex items-center\">\n            <Activity className=\"mr-2 h-5 w-5 text-primary\" />\n            {animal.species || \"Animal\"} {animal.name && `- ${animal.name}`}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {animal.behavior && (\n            <div>\n              <h4 className=\"font-medium text-sm text-muted-foreground mb-1\">Behavior</h4>\n              <p className=\"text-sm\">{animal.behavior}</p>\n            </div>\n          )}\n          {animal.health_status && (\n            <div>\n              <h4 className=\"font-medium text-sm text-muted-foreground mb-1\">Health Status</h4>\n              <Badge variant={animal.health_status.toLowerCase().includes('good') || animal.health_status.toLowerCase().includes('healthy') ? \"default\" : \"secondary\"}>\n                {animal.health_status}\n              </Badge>\n            </div>\n          )}\n          {animal.location && (\n            <div>\n              <h4 className=\"font-medium text-sm text-muted-foreground mb-1 flex items-center\">\n                <MapPin className=\"mr-1 h-3 w-3\" />\n                Location\n              </h4>\n              <p className=\"text-sm\">{animal.location}</p>\n            </div>\n          )}\n          {animal.notes && (\n            <div>\n              <h4 className=\"font-medium text-sm text-muted-foreground mb-1\">Notes</h4>\n              <p className=\"text-sm\">{animal.notes}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    ));\n  };\n\n  const renderEnvironmentData = (environment: any) => {\n    if (!environment || Object.keys(environment).length === 0) return null;\n\n    return (\n      <Card className=\"mb-4\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg flex items-center\">\n            <Cloud className=\"mr-2 h-5 w-5 text-blue-500\" />\n            Environment Conditions\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            {environment.weather && (\n              <div>\n                <h4 className=\"font-medium text-sm text-muted-foreground mb-1\">Weather</h4>\n                <p className=\"text-sm\">{environment.weather}</p>\n              </div>\n            )}\n            {environment.temperature && (\n              <div>\n                <h4 className=\"font-medium text-sm text-muted-foreground mb-1\">Temperature</h4>\n                <p className=\"text-sm\">{environment.temperature}</p>\n              </div>\n            )}\n            {environment.humidity && (\n              <div>\n                <h4 className=\"font-medium text-sm text-muted-foreground mb-1\">Humidity</h4>\n                <p className=\"text-sm\">{environment.humidity}</p>\n              </div>\n            )}\n          </div>\n          {environment.notes && (\n            <div>\n              <h4 className=\"font-medium text-sm text-muted-foreground mb-1\">Environment Notes</h4>\n              <p className=\"text-sm\">{environment.notes}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderKeeperObservations = (keeperObs: any) => {\n    if (!keeperObs || Object.keys(keeperObs).length === 0) return null;\n\n    return (\n      <Card className=\"mb-4\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg flex items-center\">\n            <User className=\"mr-2 h-5 w-5 text-green-500\" />\n            Keeper Observations\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {keeperObs.general_notes && (\n            <div>\n              <h4 className=\"font-medium text-sm text-muted-foreground mb-1\">General Notes</h4>\n              <p className=\"text-sm\">{keeperObs.general_notes}</p>\n            </div>\n          )}\n          {keeperObs.concerns && (\n            <div>\n              <h4 className=\"font-medium text-sm text-muted-foreground mb-1\">Concerns</h4>\n              <p className=\"text-sm text-amber-600\">{keeperObs.concerns}</p>\n            </div>\n          )}\n          {keeperObs.recommendations && (\n            <div>\n              <h4 className=\"font-medium text-sm text-muted-foreground mb-1\">Recommendations</h4>\n              <p className=\"text-sm text-blue-600\">{keeperObs.recommendations}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${submissionId}`}>\n            <Eye className=\"h-4 w-4 mr-2\" />\n            View\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <FileText className=\"mr-2 h-5 w-5\" />\n            Observation Details\n          </DialogTitle>\n        </DialogHeader>\n        <ScrollArea className=\"max-h-[calc(90vh-8rem)] pr-4\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : submission ? (\n            <div className=\"space-y-6\">\n              {/* Header Info */}\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                  <div className=\"flex items-center\">\n                    <Calendar className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"font-medium\">Date</p>\n                      <p className=\"text-muted-foreground\">{formatDate(submission.date)}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Clock className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"font-medium\">Time</p>\n                      <p className=\"text-muted-foreground\">{formatTime(submission.createdAt)}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <User className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"font-medium\">Keeper</p>\n                      <p className=\"text-muted-foreground\">{submission.user?.name || \"Unknown\"}</p>\n                    </div>\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">Status</p>\n                    <Badge variant={submission.status === \"processed\" ? \"default\" : \"secondary\"}>\n                      {submission.status}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Structured Data */}\n              {submission.structuredData && (\n                <div>\n                  <h3 className=\"text-xl font-semibold mb-4\">Processed Observation Data</h3>\n                  \n                  {/* Animal Observations */}\n                  {submission.structuredData.animals && (\n                    <div className=\"mb-6\">\n                      <h4 className=\"text-lg font-medium mb-3\">Animal Observations</h4>\n                      {renderAnimalObservations(submission.structuredData.animals)}\n                    </div>\n                  )}\n\n                  {/* Environment Data */}\n                  {submission.structuredData.environment && (\n                    <div className=\"mb-6\">\n                      <h4 className=\"text-lg font-medium mb-3\">Environment</h4>\n                      {renderEnvironmentData(submission.structuredData.environment)}\n                    </div>\n                  )}\n\n                  {/* Keeper Observations */}\n                  {submission.structuredData.keeper_observations && (\n                    <div className=\"mb-6\">\n                      <h4 className=\"text-lg font-medium mb-3\">Additional Observations</h4>\n                      {renderKeeperObservations(submission.structuredData.keeper_observations)}\n                    </div>\n                  )}\n\n                  {/* Observation Type */}\n                  {submission.structuredData.observation_type && (\n                    <div className=\"mb-4\">\n                      <h4 className=\"font-medium text-sm text-muted-foreground mb-1\">Observation Type</h4>\n                      <Badge variant=\"outline\">{submission.structuredData.observation_type}</Badge>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Raw Transcription */}\n              {submission.transcription && (\n                <div>\n                  <Separator className=\"my-4\" />\n                  <h4 className=\"text-lg font-medium mb-3\">Original Transcription</h4>\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                        {submission.transcription}\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {/* No Data Message */}\n              {!submission.structuredData && !submission.transcription && (\n                <div className=\"text-center py-8\">\n                  <FileText className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                  <h4 className=\"text-lg font-medium mb-2\">No Processed Data</h4>\n                  <p className=\"text-muted-foreground\">\n                    This observation is still being processed or encountered an error.\n                  </p>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\">Failed to load observation details.</p>\n            </div>\n          )}\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n","size_bytes":12489}},"version":1}